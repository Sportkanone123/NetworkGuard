package de.sportkanone123.networkguard.spigot.module.impl.antiexploit;

import de.sportkanone123.networkguard.spigot.data.PlayerData;
import de.sportkanone123.networkguard.spigot.module.Module;
import de.sportkanone123.networkguard.spigot.module.ModuleInfo;
import de.sportkanone123.networkguard.spigot.packet.LoginPacket;
import de.sportkanone123.networkguard.spigot.packet.PlayPacket;
import io.github.retrooper.packetevents.packetwrappers.play.in.custompayload.WrappedPacketInCustomPayload;
import io.github.retrooper.packetevents.packetwrappers.play.out.bedit.WrappedPacketInBEdit;
import org.apache.commons.lang.StringUtils;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;

import java.nio.charset.StandardCharsets;

@ModuleInfo(name = "Book", description = "Checks for large books.")
public class BookModule extends Module {

    public BookModule(final PlayerData data) {
        super(data);
    }

    @Override
    public void handle(PlayPacket packet) {
        if(packet.isCustomPayload()){
            WrappedPacketInCustomPayload customPayload = new WrappedPacketInCustomPayload(packet.getRawPacket());
            String channel = customPayload.getChannelName();

            if(channel.equals("MC|BEdit") || channel.equals("MC|BSign") || channel.equals("MC|BOpen")){
                ItemStack itemInHand = this.data.getPlayer().getInventory().getItem(this.data.getPlayer().getInventory().getHeldItemSlot());

                if(itemInHand == null || !itemInHand.toString().contains("BOOK")) {
                    packet.getPacketEvent().setCancelled(true);
                    this.fail("item main hand not book");
                }

                String dataToString = new String(customPayload.getData(), StandardCharsets.UTF_8);

                int maxBytesPages = ((StringUtils.countMatches(dataToString, "\"") / 2) * 300) + StringUtils.countMatches(dataToString, "\"");
                int maxBytesAuthor = dataToString.contains("author") ? 16 : 0;
                int maxBytesTitle = dataToString.contains("title") ? 32 : 0;

                boolean isTooLong = dataToString.replaceAll(" ", "").length() > (maxBytesAuthor + maxBytesTitle +maxBytesPages);

                if(isTooLong){
                    packet.getPacketEvent().setCancelled(true);
                    this.fail("packet is too long");
                }
            }
        }else if (packet.isBookEdit()){
            WrappedPacketInBEdit bEdit = new WrappedPacketInBEdit(packet.getRawPacket());

            if (bEdit.getItemStack().getItemMeta() instanceof BookMeta) {
                BookMeta bookMeta = (BookMeta) bEdit.getItemStack().getItemMeta();

                if(bookMeta.getTitle() != null && bookMeta.getTitle().length() > 32) {
                    packet.getPacketEvent().setCancelled(true);
                    this.fail("title too long");
                }

                if(bookMeta.getAuthor() != null && bookMeta.getAuthor().length() > 16) {
                    packet.getPacketEvent().setCancelled(true);
                    this.fail("author too long");
                }

                for (String page : bookMeta.getPages()) {
                    if(page.getBytes(StandardCharsets.UTF_8).length > 300) {
                        packet.getPacketEvent().setCancelled(true);
                        this.fail("page too long");
                    }
                }
            }
        }
    }

    @Override
    public void handle(LoginPacket packet) {

    }
}
