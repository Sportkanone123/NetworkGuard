package de.sportkanone123.networkguard.spigot.module.impl.antiexploit;

import de.sportkanone123.networkguard.spigot.data.PlayerData;
import de.sportkanone123.networkguard.spigot.module.PacketModule;
import de.sportkanone123.networkguard.spigot.module.ModuleInfo;
import de.sportkanone123.networkguard.spigot.packet.LoginPacket;
import de.sportkanone123.networkguard.spigot.packet.PlayPacket;
import io.github.retrooper.packetevents.packetwrappers.play.in.clientcommand.WrappedPacketInClientCommand;
import org.bukkit.Bukkit;

@ModuleInfo(name = "Command", description = "Checks for commands that could crash the server.")
public class CommandModule extends PacketModule {

    public CommandModule(final PlayerData data) {
        super(data);
    }

    @Override
    public void handle(PlayPacket packet) {
        if(packet.isClientCommand()){
            if(isExempt())
                return;

            WrappedPacketInClientCommand clientCommand = new WrappedPacketInClientCommand(packet.getRawPacket());

            String[][] commands = {{"WorldEdit", "/calc"},
                    {"WorldEdit", "/calculate"},
                    {"WorldEdit", "/eval"},
                    {"WorldEdit", "/evaluate"},
                    {"WorldEdit", "/solve"},
                    {"PermissionsEx", "pex promote"},
                    {"PermissionsEx", "pex demote"},
                    {"PermissionsEx", "promote"},
                    {"PermissionsEx", "demote"},
                    {"PermissionsEx", "execute"},
                    {"Holographic Displays", "hd readtext"},
                    {"Holographic Displays", "holo readtext"},
                    {"Holographic Displays", "hologram readtext"},
                    {"Holographic Displays", "holograms readtext"},
                    {"Holographic Displays", "holographicdisplays readtext"},
            };

            for (int i = 0; i < commands.length; i++){
                if(Bukkit.getPluginManager().isPluginEnabled(commands[i][0])){
                    if(clientCommand.getClientCommand().name().contains(commands[i][1])){
                        packet.getPacketEvent().setCancelled(true);
                        this.fail("forbidden command!");
                    }
                }
            }
        }
    }

    @Override
    public void handle(LoginPacket packet) {

    }
}