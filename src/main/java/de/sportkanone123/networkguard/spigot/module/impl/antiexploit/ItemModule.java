package de.sportkanone123.networkguard.spigot.module.impl.antiexploit;

import de.sportkanone123.networkguard.spigot.data.PlayerData;
import de.sportkanone123.networkguard.spigot.module.PacketModule;
import de.sportkanone123.networkguard.spigot.module.ModuleInfo;
import de.sportkanone123.networkguard.spigot.packet.LoginPacket;
import de.sportkanone123.networkguard.spigot.packet.PlayPacket;
import io.github.retrooper.packetevents.packetwrappers.play.in.setcreativeslot.WrappedPacketInSetCreativeSlot;
import io.github.retrooper.packetevents.packetwrappers.play.in.windowclick.WrappedPacketInWindowClick;
import org.bukkit.GameMode;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.Map.Entry;

@ModuleInfo(name = "Item", description = "Checks for items that could crash the server.")
public class ItemModule extends PacketModule {

    public ItemModule(final PlayerData data) {
        super(data);
    }

    @Override
    public void handle(PlayPacket packet) {
        if(packet.isCreativeSlot()){
            WrappedPacketInSetCreativeSlot creativeSlot = new WrappedPacketInSetCreativeSlot(packet.getRawPacket());
            ItemStack itemStack = creativeSlot.getClickedItem();

            if(!data.getPlayer().getGameMode().equals(GameMode.CREATIVE)){
                packet.getPacketEvent().setCancelled(true);
                this.fail("send creative item without being in gamemode creative!");
            }

            if(itemStack != null && itemStack.hasItemMeta()){
                ItemMeta itemMeta = itemStack.getItemMeta();

                if(itemMeta != null){
                    if(itemMeta.getDisplayName() != null && itemMeta.getDisplayName().length() > 128){
                        packet.getPacketEvent().setCancelled(true);
                        this.fail("displayname is too big!");
                    }

                    if(itemMeta.getLore() != null && itemMeta.getLore().size() > 32 && itemMeta.getLore().toString().getBytes().length > 1024){
                        packet.getPacketEvent().setCancelled(true);
                        this.fail("lore is too big!");
                    }

                    if(itemStack.getAmount() < 0 || itemStack.getAmount() > itemStack.getMaxStackSize()){
                        packet.getPacketEvent().setCancelled(true);
                        this.fail("invalid item amount");
                    }

                    for (final Entry<Enchantment, Integer> entry : itemStack.getEnchantments().entrySet()) {
                        Enchantment enchantment = entry.getKey();

                        if(!enchantment.canEnchantItem(itemStack)){
                            packet.getPacketEvent().setCancelled(true);
                            this.fail("item cannot be enchanted!");
                        }

                        if(itemMeta.getEnchantLevel(enchantment) < enchantment.getStartLevel() && itemMeta.getEnchantLevel(enchantment) > enchantment.getMaxLevel()){
                            packet.getPacketEvent().setCancelled(true);
                            this.fail("invalid enchantment level!");
                        }
                    }
                }
            }
        }

        if(packet.isWindowClick()){
            WrappedPacketInWindowClick windowClick = new WrappedPacketInWindowClick(packet.getRawPacket());
            ItemStack itemStack = windowClick.getClickedItemStack();

            if(itemStack != null && itemStack.hasItemMeta()){
                ItemMeta itemMeta = itemStack.getItemMeta();

                if(itemMeta != null){
                    if(itemMeta.getDisplayName() != null && itemMeta.getDisplayName().length() > 128){
                        packet.getPacketEvent().setCancelled(true);
                        this.fail("displayname is too big!");
                    }

                    if(itemMeta.getLore() != null && itemMeta.getLore().size() > 32 && itemMeta.getLore().toString().getBytes().length > 1024){
                        packet.getPacketEvent().setCancelled(true);
                        this.fail("lore is too big!");
                    }
                }
            }
        }
    }

    @Override
    public void handle(LoginPacket packet) {

    }
}
